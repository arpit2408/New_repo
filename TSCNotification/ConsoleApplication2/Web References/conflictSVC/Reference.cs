//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18052.
// 
#pragma warning disable 1591

namespace ConsoleApplication2.conflictSVC {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ConflictCheckSoap", Namespace="http://tempuri.org/")]
    public partial class ConflictCheck : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback RealTimeConflictCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback RealTimeConflictCheckAreaOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckApplicatorNotificationOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ConflictCheck() {
            this.Url = global::ConsoleApplication2.Properties.Settings.Default.ConsoleApplication2_conflictSVC_ConflictCheck;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event RealTimeConflictCheckCompletedEventHandler RealTimeConflictCheckCompleted;
        
        /// <remarks/>
        public event RealTimeConflictCheckAreaCompletedEventHandler RealTimeConflictCheckAreaCompleted;
        
        /// <remarks/>
        public event CheckApplicatorNotificationCompletedEventHandler CheckApplicatorNotificationCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RealTimeConflictCheck", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] RealTimeConflictCheck(user appuser) {
            object[] results = this.Invoke("RealTimeConflictCheck", new object[] {
                        appuser});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void RealTimeConflictCheckAsync(user appuser) {
            this.RealTimeConflictCheckAsync(appuser, null);
        }
        
        /// <remarks/>
        public void RealTimeConflictCheckAsync(user appuser, object userState) {
            if ((this.RealTimeConflictCheckOperationCompleted == null)) {
                this.RealTimeConflictCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRealTimeConflictCheckOperationCompleted);
            }
            this.InvokeAsync("RealTimeConflictCheck", new object[] {
                        appuser}, this.RealTimeConflictCheckOperationCompleted, userState);
        }
        
        private void OnRealTimeConflictCheckOperationCompleted(object arg) {
            if ((this.RealTimeConflictCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RealTimeConflictCheckCompleted(this, new RealTimeConflictCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RealTimeConflictCheckArea", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] RealTimeConflictCheckArea(AppArea userapparea, user user) {
            object[] results = this.Invoke("RealTimeConflictCheckArea", new object[] {
                        userapparea,
                        user});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void RealTimeConflictCheckAreaAsync(AppArea userapparea, user user) {
            this.RealTimeConflictCheckAreaAsync(userapparea, user, null);
        }
        
        /// <remarks/>
        public void RealTimeConflictCheckAreaAsync(AppArea userapparea, user user, object userState) {
            if ((this.RealTimeConflictCheckAreaOperationCompleted == null)) {
                this.RealTimeConflictCheckAreaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRealTimeConflictCheckAreaOperationCompleted);
            }
            this.InvokeAsync("RealTimeConflictCheckArea", new object[] {
                        userapparea,
                        user}, this.RealTimeConflictCheckAreaOperationCompleted, userState);
        }
        
        private void OnRealTimeConflictCheckAreaOperationCompleted(object arg) {
            if ((this.RealTimeConflictCheckAreaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RealTimeConflictCheckAreaCompleted(this, new RealTimeConflictCheckAreaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckApplicatorNotification", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public conflictedcrop[] CheckApplicatorNotification(user appuser) {
            object[] results = this.Invoke("CheckApplicatorNotification", new object[] {
                        appuser});
            return ((conflictedcrop[])(results[0]));
        }
        
        /// <remarks/>
        public void CheckApplicatorNotificationAsync(user appuser) {
            this.CheckApplicatorNotificationAsync(appuser, null);
        }
        
        /// <remarks/>
        public void CheckApplicatorNotificationAsync(user appuser, object userState) {
            if ((this.CheckApplicatorNotificationOperationCompleted == null)) {
                this.CheckApplicatorNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckApplicatorNotificationOperationCompleted);
            }
            this.InvokeAsync("CheckApplicatorNotification", new object[] {
                        appuser}, this.CheckApplicatorNotificationOperationCompleted, userState);
        }
        
        private void OnCheckApplicatorNotificationOperationCompleted(object arg) {
            if ((this.CheckApplicatorNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckApplicatorNotificationCompleted(this, new CheckApplicatorNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class user {
        
        private string emailField;
        
        private string passwordField;
        
        private string password2Field;
        
        private string firstnameField;
        
        private string lastnameField;
        
        private string companynameField;
        
        private string addressField;
        
        private string cityField;
        
        private string stateField;
        
        private string zipField;
        
        private string websiteField;
        
        private string phone1Field;
        
        private string phone2Field;
        
        private bool activatedField;
        
        private string preferencesField;
        
        private string prefoptionsField;
        
        /// <remarks/>
        public string email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public string password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string password2 {
            get {
                return this.password2Field;
            }
            set {
                this.password2Field = value;
            }
        }
        
        /// <remarks/>
        public string firstname {
            get {
                return this.firstnameField;
            }
            set {
                this.firstnameField = value;
            }
        }
        
        /// <remarks/>
        public string lastname {
            get {
                return this.lastnameField;
            }
            set {
                this.lastnameField = value;
            }
        }
        
        /// <remarks/>
        public string companyname {
            get {
                return this.companynameField;
            }
            set {
                this.companynameField = value;
            }
        }
        
        /// <remarks/>
        public string address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
        
        /// <remarks/>
        public string city {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        public string state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public string zip {
            get {
                return this.zipField;
            }
            set {
                this.zipField = value;
            }
        }
        
        /// <remarks/>
        public string website {
            get {
                return this.websiteField;
            }
            set {
                this.websiteField = value;
            }
        }
        
        /// <remarks/>
        public string phone1 {
            get {
                return this.phone1Field;
            }
            set {
                this.phone1Field = value;
            }
        }
        
        /// <remarks/>
        public string phone2 {
            get {
                return this.phone2Field;
            }
            set {
                this.phone2Field = value;
            }
        }
        
        /// <remarks/>
        public bool activated {
            get {
                return this.activatedField;
            }
            set {
                this.activatedField = value;
            }
        }
        
        /// <remarks/>
        public string preferences {
            get {
                return this.preferencesField;
            }
            set {
                this.preferencesField = value;
            }
        }
        
        /// <remarks/>
        public string prefoptions {
            get {
                return this.prefoptionsField;
            }
            set {
                this.prefoptionsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class conflictedcrop {
        
        private int cropidField;
        
        private float distanceField;
        
        private int conflictflagField;
        
        private string appareanameField;
        
        /// <remarks/>
        public int cropid {
            get {
                return this.cropidField;
            }
            set {
                this.cropidField = value;
            }
        }
        
        /// <remarks/>
        public float distance {
            get {
                return this.distanceField;
            }
            set {
                this.distanceField = value;
            }
        }
        
        /// <remarks/>
        public int conflictflag {
            get {
                return this.conflictflagField;
            }
            set {
                this.conflictflagField = value;
            }
        }
        
        /// <remarks/>
        public string appareaname {
            get {
                return this.appareanameField;
            }
            set {
                this.appareanameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class AppArea {
        
        private string idField;
        
        private string usremailField;
        
        private string appareanameField;
        
        private string countyField;
        
        private string coordinatesField;
        
        private string areacentroidField;
        
        private string buffercoordsField;
        
        private string acresField;
        
        private string licenseField;
        
        private string pesticidenameField;
        
        private string moddateField;
        
        private string commentField;
        
        /// <remarks/>
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string usremail {
            get {
                return this.usremailField;
            }
            set {
                this.usremailField = value;
            }
        }
        
        /// <remarks/>
        public string appareaname {
            get {
                return this.appareanameField;
            }
            set {
                this.appareanameField = value;
            }
        }
        
        /// <remarks/>
        public string county {
            get {
                return this.countyField;
            }
            set {
                this.countyField = value;
            }
        }
        
        /// <remarks/>
        public string coordinates {
            get {
                return this.coordinatesField;
            }
            set {
                this.coordinatesField = value;
            }
        }
        
        /// <remarks/>
        public string areacentroid {
            get {
                return this.areacentroidField;
            }
            set {
                this.areacentroidField = value;
            }
        }
        
        /// <remarks/>
        public string buffercoords {
            get {
                return this.buffercoordsField;
            }
            set {
                this.buffercoordsField = value;
            }
        }
        
        /// <remarks/>
        public string acres {
            get {
                return this.acresField;
            }
            set {
                this.acresField = value;
            }
        }
        
        /// <remarks/>
        public string license {
            get {
                return this.licenseField;
            }
            set {
                this.licenseField = value;
            }
        }
        
        /// <remarks/>
        public string pesticidename {
            get {
                return this.pesticidenameField;
            }
            set {
                this.pesticidenameField = value;
            }
        }
        
        /// <remarks/>
        public string moddate {
            get {
                return this.moddateField;
            }
            set {
                this.moddateField = value;
            }
        }
        
        /// <remarks/>
        public string comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void RealTimeConflictCheckCompletedEventHandler(object sender, RealTimeConflictCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RealTimeConflictCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RealTimeConflictCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void RealTimeConflictCheckAreaCompletedEventHandler(object sender, RealTimeConflictCheckAreaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RealTimeConflictCheckAreaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RealTimeConflictCheckAreaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CheckApplicatorNotificationCompletedEventHandler(object sender, CheckApplicatorNotificationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckApplicatorNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckApplicatorNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public conflictedcrop[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((conflictedcrop[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591