using System;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;
using System.Web.Services;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Web.Script.Services;
using System.Web.Script.Serialization;
public partial class Producers : System.Web.UI.Page
{
    private static SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["TXSCropsConnectionString"].ConnectionString);

    protected void Page_Load(object sender, EventArgs e)
    {
        
    }
    [System.Web.Services.WebMethod]
    public static ArrayList getCropLocations()
    {
        ArrayList result = new ArrayList();
        //string result = "";
        char[] separator = new char[] { ',' };
        string[] userInfo = null;

        CropLocations cropLocation = new CropLocations();

        try
        {
            if (HttpContext.Current.User.Identity.IsAuthenticated)
            {
                //userInfo[0]:email, userInfo1[1]: firstName
                userInfo = HttpContext.Current.User.Identity.Name.Split(separator);
            }
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }

            System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand();
            cmd.CommandType = System.Data.CommandType.Text;
            cmd.CommandText = "SELECT Producers.email, Producers.firstName, CropLocations.CID, CropLocations.cropType, CropLocations.cropYear " +
               ", CropLocations.comment, CropLocations.county, CropLocations.coordinates, CropLocations.acres, CropLocations.organicCrops, CropLocations.certifier " +
               " FROM Producers INNER JOIN CropLocations ON Producers.email=CropLocations.producerEmail " +
               "where Producers.email = '" + userInfo[0] + "'";

            cmd.Connection = cn;

            SqlDataReader dr = cmd.ExecuteReader();

            if (dr.HasRows) //already registered
            {

                while (dr.Read())
                {
                    cropLocation.locationid = dr["CID"].ToString();
                    cropLocation.croptype = dr["cropType"].ToString();
                    cropLocation.cropyear = dr["cropYear"].ToString();
                    cropLocation.comment = dr["comment"].ToString();
                    cropLocation.county = dr["county"].ToString();
                    cropLocation.acres = dr["acres"].ToString();
                    cropLocation.organiccrops = Convert.ToInt32(dr["organicCrops"]);
                    cropLocation.certifier = dr["certifier"].ToString();
                    cropLocation.coordinates = dr["coordinates"].ToString();
                    cropLocation.email = dr["email"].ToString();
                    //cropLocation.firstName = dr["firstName"].ToString();
                    //cropLocation.isRegistered = true;
                    
                }
            }
            else
            {//new user
                cropLocation.email = userInfo[0];
                //cropLocation.firstName = userInfo[1];
                //cropLocation.isRegistered = false;
                    
            }
            dr.Close();
            cn.Close();



        }
        catch (Exception ex)
        {
            cn.Close();
            result.Add("Error: " + ex.Message);
        }
        finally
        {
            cn.Close();
            JavaScriptSerializer js = new JavaScriptSerializer();
            result.Add(js.Serialize(cropLocation));
        }
        return result;

    }
    [System.Web.Services.WebMethod]
    public static string saveCropLocations(CropLocations cropLocation)
    {
        string result = "Sucess. ";
        string userEmail = "";
        try
        {
            if (HttpContext.Current.User.Identity.IsAuthenticated)
                userEmail = HttpContext.Current.User.Identity.Name;
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            
            System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand();
            cmd.CommandType = System.Data.CommandType.Text;
            //if (!cropLocation.isRegistered) //new register - insert
            {
                cmd.CommandText = "INSERT into CropLocations (CID, cropType, cropYear, comment, county, coordinates, acres, organicCrops,certifier, producerEmail) VALUES " +
                "('" + Guid.NewGuid() + "', '" + cropLocation.cropType + "', '" + cropLocation.cropYear + "', '" + cropLocation.comment + "', '" + cropLocation.county +
                "', '" + cropLocation.coordinates + "', '" + cropLocation.acres + "', " + cropLocation.organicCrops + ", '" + cropLocation.certifier +
                "', '" + cropLocation.email + "')";
                result += "Thank you for registering.";
            }
            else //if alread registered , update it
            {
                cmd.CommandText = "UPDATE CropLocations " +
                    "SET cropType = '"+ cropLocation.cropType + "', cropYear='"+ cropLocation.cropYear + "', comment= '" +cropLocation.comment +
                    "', county='" + cropLocation.county +  "', coordinates='"+ cropLocation.coordinates + "',acres = '" + cropLocation.acres +
                    "', organicCrops = "+ cropLocation.organicCrops + ", certifier='" +cropLocation.certifier + "' " +
                    "WHERE producerEmail = '"  +cropLocation.email +"'";
                result += "Updated.";
            }
            cmd.Connection = cn;

            //sqlConnection1.Open();
            cmd.ExecuteNonQuery();
            
            cn.Close();



        }
        catch (Exception ex)
        {
            cn.Close();
            result = "Error: " + ex.Message;
        }
        finally
        {
            cn.Close();
        }

        return result;

    }
}
